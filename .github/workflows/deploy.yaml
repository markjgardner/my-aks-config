name: Deploy

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"

on:
  push:
    branches: [ "main" ]

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config=resource_group_name=$TF_BACKEND_RESOURCE_GROUP \
          -backend-config=storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT \
          -backend-config=container_name=$TF_BACKEND_CONTAINER_NAME \
          -backend-config=key=$TF_BACKEND_KEY
      - name: Terraform Plan
        run: terraform plan

  apply:
    runs-on: ubuntu-latest
    needs: [plan]
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config=resource_group_name=$TF_BACKEND_RESOURCE_GROUP \
          -backend-config=storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT \
          -backend-config=container_name=$TF_BACKEND_CONTAINER_NAME \
          -backend-config=key=$TF_BACKEND_KEY
      - name: Terraform Apply
        run: terraform apply -auto-approve